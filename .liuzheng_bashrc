#====================color======================
red='\[\e[0;31m\]'
RED='\[\e[1;31m\]'
blue='\[\e[0;34m\]'
BLUE='\[\e[1;34m\]'
cyan='\[\e[0;36m\]'
CYAN='\[\e[1;36m\]'
normal='\[\e[m\]'
white='\[\e[0;37m\]'
WHITE='\[\e[1;37m\]'
magenta='\[\e[0;35m\]'
MAGENTA='\[\e[1;35m\]'
yellow='\[\e[0;33m\]'
YELLOW='\[\e[1;33m\]'
green='\[\e[0;32m\]'
GREEN='\[\e[1;32m\]'
black='\[\e[0;30m\]'
BLACK='\[\e[1;30m\]'
NC='\[\e[m\]'

PATHCOLOR='\e[4;49;37m'
TIMECOLOR='\e[1;32;40m'


source ~/config/kube-prompt.sh
source ~/config/git-prompt.sh
#==================color end====================
PATH=$PATH:$HOME
HISTFILE="$HOME/.bash_history"
HISTSIZE=10000000
SAVEHIST=10000000
HISTFILESIZE=20000
TF_ALIAS=fuck alias fuck='PYTHONIOENCODING=utf-8 eval $(thefuck $(fc -ln -1)); history -r'
CDPATH=.:~:$HOME/gitproject
if [ "$UID" -eq 0 ]; then
  export PT='%#'
else
  export PT='\$'
fi
PROMPT="%{$GREEN%}[%{$RED%}%n%{$YELLOW%}@%{$GREEN%}%m%{$cyan%}:%U%{$black%}%~%u%{$NC%}%{$YELLOW%}\$(__ps1_git)%{$GREEN%}] >>%D %* << 
%{$YELLOW%}\$(__kube_ps1)%{$NC%}%{$RED%}$PT%{$NC%} "
PS1="$GREEN[$RED\u$YELLOW@$GREEN\h$cyan:$PATHCOLOR\w$NC$YELLOW\$(__ps1_git)$GREEN] $TIMECOLOR>>\d \t<<$NC\n${YELLOW}\$(__kube_ps1)$NC$RED\$\[\e[m\] "


bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

#===================alias=======================
# ls
alias ll='ls -l'
alias la='ls -Al'
alias ls='ls -FHG'
alias lx='ls -lXB'
alias lk='ls -lSr'
alias lc='ls -lcr'
alias lu='ls -lur'
alias lr='ls -lR'
alias lt='ls -ltr'
alias lm='ls -al |more'
alias dit="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz images -t"

# hand wrong
alias vf='cd'
alias xs='cd'
alias ks='ls'
alias kk='ll'
alias moew='more'

# df
alias dfh='df -h'

# make
alias mk="make"
alias mki="make install"

# clc
alias clc="clear"
alias lcl="clear"

# cd
alias c="cd"
alias cd..="cd .."
alias cd...="cd ../.."
alias cd....="cd ../../.."
alias cd....="cd ../../../.."

# git
alias gitc='git clone'
alias gpom='git push origin master'
alias gitp='git pull'
alias gita='git add'
alias gitau='git add -u'
alias gitA='git add -A'
alias gitm='git commit'
alias gitM='git commit -m'
alias gits='git status'

# grep
alias grep='grep --color'
alias egrep='egrep --color'
alias fgrep='fgrep --color'
alias vime='/opt/vim/bin/vim'
#===================alias end===================

export LANG=zh_CN.UTF-8
export LC_NUMERIC=en_US.UTF-8
export LC_TIME=en_US.UTF-8
export LC_COLLATE=en_US.UTF-8
export LC_MONETARY=en_US.UTF-8
export LC_MESSAGES=en_US.UTF-8
export LC_PAPER=en_US.UTF-8
export LC_NAME=en_US.UTF-8
export LC_ADDRESS=en_US.UTF-8
export LC_TELEPHONE=en_US.UTF-8
export LC_MEASUREMENT=en_US.UTF-8
export LC_IDENTIFICATION=en_US.UTF-8
export LC_CTYPE=zh_CN.UTF-8
export LC_ALL="C"
export LANGUAGE=zh_CN.UTF-8

#===================function====================
# pathogen rm bundle
function vimrm()
{
rm -rf $1
git rm -r $1
}

# pathogen git add
function vimgit()
{
  if [ -z $1 ];then
    echo 'Usage: vimgit GITPATH, examp: vimgit https://github.com/vim-scripts/The-NERD-tree.git'
  else
    name=`echo $1|sed 's/.*\/\(.*\)\.git/\1/g'`
      git submodule add $1 .vim/bundle/$name
  fi
}

# pathogen git pull all
function vimupdate()
{
git submodule foreach 'git clean -fx && git fetch && git reset --hard remotes/origin/HEAD'
}

# get ip
function myip()
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' | sed -e s/addr://)
    MY_ISP=$(/sbin/ifconfig eth0 | awk '/P-t-P/ { print $3 } ' | sed -e s/P-t-P://)
}

# docker clean
function docker-none-clean()
{
  docker images | grep none | awk '{print "docker rmi -f "$3}' | sh
}
function docker-clean()
{
  docker ps -a | grep Exited | awk '{print "docker rm -f "$1}' | sh
}

# find text in the file
function ffi()
{
grep -D skip -nRe "$1" .
}

# get local computer info
function ii()
{
    echo -e "You are logged on ${RED}$HOST"
    echo -e "Additionnal information:$NC " ; uname -a
    echo -e "${RED}Users logged on:$NC " ; w -h
    echo -e "${RED}Current date :$NC " ; cal
    echo -e "${RED}Machine stats :$NC " ; uptime
    echo -e "${RED}Memory stats :$NC " ; free
    myip 2>&- ;
    echo -e "${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
    echo -e "${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
    echo
}

# find file name
function ff() { find . -type f -iname '*'$*'*' -ls ; }
function ffd() { find . -type f -iname '*'$*'*' -ls -delete; }

function psshc(){
      pssh -h ~/config/server.list -l root -P $1

}

function psshp(){
      pscp -h ~/config/server.list -l root $1 $2

}

function psshg(){
      prsync -r -h ~/config/server.list -l $1 $2

}

# gitsubupdate
function gitsubupdate()
{
  git commit | grep 'modified' | grep 'untracked' | awk '{print "rm -fr " $2 "&& rm -fr ./git/submodule/"$2}' | sh
  git submodule init
  git submodule update
  #fn=`git commit | grep 'modified:' | sed -e 's/.*: *\(.*\) .* .*/\1/g'`
  #for name in $fn
  #  do 
  #    rm -rf $name
  #    rm -rf './git/submodule/'$name
  #    git submodule init
  #    git submodule update
  #  done
}


function gb2utf()
{
    iconv -f gb2312 -t utf-8 $1>$1+f && mv $1+f $1
}

# swap
function addswap()
{
  swapoff /home/swap
  dd if=/dev/zero of=/home/swap bs=1024 count=$1
  mkswap /home/swap
  swapon /home/swap

}

# find same file
function fsamef()
{
  find . \! -type d -exec md5sum '{}' ';' | sort | uniq -D -w 33
}

# salt function
function saltall()
{
  sudo salt '*' $1 $2 $3
}

function saltpingall()
{
  saltall test.ping
}

function saltcpfile()
{
  saltall cp.get_file salt://$1 $2 
}

function saltcmd()
{
  p=""
  for i in $*
  do
    p=$p" "$i
  done
  echo $p
  sudo salt '*' cmd.run " $p "
}

function xelatexin()
{
  cp ~/config/simple/xelatex/* .
  case $1 in
    book)
      rm *article*
    ;;
    article)
      rm *book*
    ;;
    *)
      rm *book*
    ;;
  esac
}
function sj() { date +%T ; }
function rq() { date +%F ; }
function SJ() { date +%F-%T ; }
function addblog() { rake post title="$1" ; }
function dockerstart(){
  eval "$(docker-machine env $1)"
  export DOCKER_OPTS="-H $DOCKER_HOST --tls --tlskey $DOCKER_CERT_PATH/server-key.pem --tlscert $DOCKER_CERT_PATH/server.pem --tlsverify --tlscacert $DOCKER_CERT_PATH/ca.pem"
  alias dockers="docker $DOCKER_OPTS"
}
alias dsit="dockers run --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz images -t"
#==================function end=================


#============== completions ==============
# brew completion
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
# docker completion 
[ -f ~/config/.bashrc_docker ] && . ~/config/.bashrc_docker
# git completion
[ -f ~/config/git-completion.bash ] && . ~/config/git-completion.bash

#===================nvm=======================
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
